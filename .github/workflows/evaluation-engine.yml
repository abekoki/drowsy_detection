name: Run Evaluation Engine

on:
  push:
    branches: [ "*" ]  # 全ブランチで実行

jobs:
  run-evaluation-engine:
    runs-on: self-hosted
    
    steps:
    - name: Checkout drowsy_detection code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 全履歴を取得
    
    - name: Verify Python installation
      shell: cmd
      run: |
        echo ========================================
        echo Python環境の詳細確認
        echo ========================================
        echo Python環境の確認中...
        python --version
        python -c "import sys; print(f'Python {sys.version}')"
        python -c "import sys; print(f'Python実行パス: {sys.executable}')"
        python -c "import sys; print(f'Pythonパス: {sys.path}')"
        echo 現在のディレクトリ:
        cd
        echo 環境変数PATH:
        echo %PATH%
        echo ✅ Python環境OK
    
    - name: Install uv (if not available)
      shell: cmd
      run: |
        echo ========================================
        echo uvの詳細確認とインストール
        echo ========================================
        echo uvの確認中...
        where uv >nul 2>&1 || (
          echo uvをシステム全体にインストール中...
          python -m pip install --user uv
          echo uvのパスを確認中...
          python -c "import shutil; print(shutil.which('uv') or 'uv not found in PATH')"
          echo uvの実際のインストール場所を確認:
          python -c "import uv; print(uv.__file__)" 2>nul || echo uvモジュールの場所を確認できません
          echo pip listでuvの確認:
          python -m pip list | findstr uv
        )
        echo uvのパス確認:
        where uv 2>nul || echo uvがパスに見つかりません
        echo python -m uvの確認:
        python -c "import uv; print('uvモジュール利用可能:', uv.__version__)" 2>nul || (
          echo uvモジュールのインポートに失敗しました - これは正常な場合があります
          echo 代替方法でuvの確認:
          python -c "import subprocess; result = subprocess.run(['python', '-m', 'uv', '--version'], capture_output=True, text=True); print('python -m uv version:', result.stdout.strip() if result.returncode == 0 else 'Failed')" 2>nul || echo python -m uvの実行に失敗
        )
        echo ✅ uv準備完了
        
        REM uvの実際の動作確認
        echo ========================================
        echo uvの実際の動作確認
        echo ========================================
        echo python -m uv --versionの実行:
        python -m uv --version 2>nul || echo python -m uv --versionに失敗
        echo python -m uv venv --helpの実行:
        python -m uv venv --help 2>nul | findstr "Create a virtual environment" || echo python -m uv venv --helpに失敗
    
    - name: Clone evaluation_engine repository
      shell: cmd
      run: |
        echo ========================================
        echo evaluation_engineリポジトリのクローン
        echo ========================================
        echo evaluation_engineリポジトリをクローン中...
        echo 現在のディレクトリ:
        cd
        echo ディレクトリ内容:
        dir
        if exist evaluation_engine (
          echo 既存のディレクトリを削除中...
          rmdir /s /q evaluation_engine
        )
        echo Gitクローン実行:
        git clone https://github.com/abekoki/evaluation_engine.git
        echo クローン後のディレクトリ内容:
        dir
        cd evaluation_engine
        echo evaluation_engineディレクトリ内容:
        dir
        echo ✅ evaluation_engineクローン完了
    
    - name: Setup evaluation_engine environment
      shell: cmd
      run: |
        echo ========================================
        echo evaluation_engine環境セットアップ
        echo ========================================
        cd evaluation_engine
        echo evaluation_engineディレクトリに移動完了
        echo 現在のディレクトリ:
        cd
        echo evaluation_engineディレクトリ内容:
        dir
        
        REM uv syncで依存関係を解決
        echo ========================================
        echo uv syncで依存関係を解決
        echo ========================================
        echo uv syncを実行中...
        uv sync
        if errorlevel 1 (
          echo ❌ uv syncに失敗しました - python -m uv syncを試行
          echo python -m uv syncを実行中...
          python -m uv sync
          if errorlevel 1 (
            echo ❌ python -m uv syncにも失敗しました
            exit /b 1
          )
          echo ✅ python -m uv sync完了
        ) else (
          echo ✅ uv sync完了
        )
        
        REM drowsy_detectionアルゴリズムのインストール
        echo ========================================
        echo drowsy_detectionアルゴリズムのインストール
        echo ========================================
        echo drowsy_detectionインストール中...
        echo 親ディレクトリの内容:
        dir ..
        echo uv pip installでdrowsy_detectionをインストール中...
        uv pip install -e ../
        if errorlevel 1 (
          echo ❌ drowsy_detectionのインストールに失敗しました
          exit /b 1
        )
        echo ✅ drowsy_detectionインストール完了
        echo インストール後のパッケージ一覧:
        python -m pip list | findstr drowsy
        
        echo ✅ evaluation_engine環境セットアップ完了
    
    - name: Run evaluation_engine main.py
      shell: cmd
      run: |
        echo ========================================
        echo evaluation_engine main.py実行
        echo ========================================
        cd evaluation_engine
        echo evaluation_engineディレクトリに移動完了
        echo 現在のディレクトリ:
        cd
        echo evaluation_engineディレクトリ内容:
        dir
        echo main.pyファイルの確認:
        dir main.py
        
        echo uv run main.pyを実行中...
        uv run main.py
        if errorlevel 1 (
          echo ❌ main.pyの実行に失敗しました
          echo エラー詳細を確認:
          echo 仮想環境内のPythonパス:
          call .venv\Scripts\activate.bat && python -c "import sys; print(sys.executable)"
          echo 仮想環境内のパッケージ一覧:
          call .venv\Scripts\activate.bat && python -m pip list
          exit /b 1
        )
        echo ✅ evaluation_engine実行完了
    
    - name: Upload evaluation results as artifact
      uses: actions/upload-artifact@v4
      with:
        name: evaluation-results-${{ github.sha }}
        path: evaluation_engine/
        retention-days: 30
